version: 2

jobs:

  build:
    
    working_directory: ~/src

    docker:
      - image: circleci/openjdk:8-jdk-browsers
      
   
#    branches:
#      ignore:
 #       - /branch1

    steps:
      - checkout

      - restore_cache:
          key: spring-framework-petclinic-{{ checksum "pom.xml" }}
      
      - run: mvn clean package
      
      - run: mvn install -DskipTests=true 
      - run: docker build -t app .

      - save_cache:
          paths:
            - ~/.m2
          key: spring-framework-petclinic-{{ checksum "pom.xml" }}

      - persist_to_workspace:
          root: ~/src
          paths:
            - target/petclinic.war
      - store_artifacts:
          path: /tmp/petclinic

  test:
    working_directory: ~/src

    docker:
      - image: circleci/openjdk:8-jdk-browsers

    steps:
      - checkout

      - restore_cache:
          key: spring-framework-petclinic-{{ checksum "pom.xml" }}

      - run: mvn test

      - save_cache:
          paths:
            - ~/.m2
          key: spring-framework-petclinic-{{ checksum "pom.xml" }}

      - persist_to_workspace:
          root: ~/src
          paths:
            - target/surefire-reports
  docker-deploy:
    working_directory: ~/src
    docker:
      - image: docker:17.05.0-ce-git
      
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install awscli==1.11.76
      - run:
          name: Build application Docker image
          command: |
            docker build -t app .
      # If we had
      #- run:
      #    name: Run mongo db
      #    command: |
      #      docker run --name mongo_test -d mongo
      #- run:
      #    name: Run tests
      #    command: |
      #      docker run -a STDOUT -it -p 4100:3000 --link mongo_test:db --name test_app app gulp test
      #      #docker exec -t test_app gulp test
      - run:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              CLUSTER='test-app'
              FAMILY='test-app'
              DOCKER_IMAGE='test-app'
              TASK='test-app'
              SERVICE='app-service'
              # Login to AWS
              aws configure set region $AWS_REGION
              $(aws ecr get-login)
              # Tag and push docker image
              docker tag app $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE:$CIRCLE_SHA1
              docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE:$CIRCLE_SHA1
              # Create task for docker deploy
              task_template='[
                {
                  "name": "%s",
                  "image": "%s.dkr.ecr.%s.amazonaws.com/%s:%s",
                  "essential": true,
                  "cpu": 128,
                  "memoryReservation": 500,
                  "portMappings": [
                    {
                      "containerPort": 80,
                      "hostPort": 80
                    }
                  ],
                  "environment" : [
                      { "name" : "NODE_ENV", "value" : "production" }
                  ]
                }
              ]'
              echo "$task_template"
              task_def=$(printf "$task_template" $TASK $AWS_ACCOUNT_ID $AWS_REGION $TASK $CIRCLE_SHA1)
              # Register task definition
              json=$(aws ecs register-task-definition --container-definitions "$task_def" --family "$FAMILY")
              OLD_TASK_ID=$(aws ecs list-tasks --cluster "$CLUSTER" --desired-status RUNNING --family "$FAMILY" | egrep "task/" | sed -E "s/.*task\/(.*)\"/\1/")
              # Grab revision # using regular bash and grep
              revision=$(echo "$json" | grep -o '"revision": [0-9]*' | grep -Eo '[0-9]+')
              # Deploy revision 
              aws ecs stop-task --cluster "$CLUSTER" --task "${OLD_TASK_ID}"
              sleep 10
              aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$TASK":"$revision"
             
              return 0
            fi
workflows:

  version: 2

  build-test-and-deploy:

    jobs:

      - build
      - test:
          requires:
            - build  
      - docker-deploy:
          requires:
            - test            

      
